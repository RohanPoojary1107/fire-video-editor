[{"D:\\fire\\final-project-thenerds\\fire\\src\\index.js":"1","D:\\fire\\final-project-thenerds\\fire\\src\\App.js":"2","D:\\fire\\final-project-thenerds\\fire\\src\\reportWebVitals.js":"3","D:\\fire\\final-project-thenerds\\fire\\src\\components\\mediaPool.js":"4"},{"size":517,"mtime":1612671324219,"results":"5","hashOfConfig":"6"},{"size":393,"mtime":1612677632366,"results":"7","hashOfConfig":"6"},{"size":375,"mtime":1612671324221,"results":"8","hashOfConfig":"6"},{"size":2467,"mtime":1612708858373,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"lg5sfx",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"12"},"D:\\fire\\final-project-thenerds\\fire\\src\\index.js",[],["20","21"],"D:\\fire\\final-project-thenerds\\fire\\src\\App.js",[],"D:\\fire\\final-project-thenerds\\fire\\src\\reportWebVitals.js",[],"D:\\fire\\final-project-thenerds\\fire\\src\\components\\mediaPool.js",["22","23"],"import React, { useState } from 'react';\r\n\r\nfunction MediaPool() {\r\n    const [files, getFiles] = useState([]);\r\n    const listItems = files.map((item) =>{\r\n        if(item[0].type.includes('video')){\r\n            return (\r\n                <div class=\"video\">\r\n                <video width=\"100\" src={URL.createObjectURL(item[0])}></video>\r\n                <small>{item[1].name}</small>\r\n                </div>\r\n                );\r\n        }\r\n        else if(item[0].type.includes('image')){\r\n            return (\r\n                <div class=\"image\">\r\n                <img width=\"100\" src={URL.createObjectURL(item[0])}/>\r\n                <small>{item[1].name}</small>\r\n                </div>\r\n                );\r\n        }\r\n    \r\n  });\r\n\r\n    const handleChange = file_list => getFiles(files.concat(file_list));\r\n    return(\r\n        <div class=\"MediaPool\">\r\n            <h2>Project Files</h2>\r\n            {listItems}\r\n            <Button value='click here to select files' onChange={handleChange}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst options = {\r\n    types: [\r\n      {\r\n        accept: {\r\n          'videos/*': ['.mp4', '.mov', '.wmv', '.avi', '.flv'],\r\n          'images/*': ['.jpg', '.png', '.gif', '.jpeg']\r\n        }\r\n      },\r\n    ],\r\n    multiple: true,\r\n    excludeAcceptAllOption: true\r\n  };\r\n\r\nconst onClick = async (onChange) => {\r\n    const Handle = await window.showOpenFilePicker(options);\r\n    let file_list = [];\r\n    for await (const entry of Handle.values()){\r\n        let file = await entry.getFile();\r\n        file_list.push([file,entry]);\r\n    }\r\n    onChange(file_list);\r\n}\r\n\r\nconst onDrag = async (e, onChange) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    let file_list = [];\r\n    for (const item of e.dataTransfer.items) {\r\n        if (item.kind === 'file' && (item.type.includes('video') || item.type.includes('image'))) {\r\n            const entry = await item.getAsFileSystemHandle();\r\n            let file = await entry.getFile();\r\n            file_list.push([file,entry]);\r\n        }\r\n    }\r\n    onChange(file_list);\r\n}\r\n\r\nconst Button = (props) => {  \r\n    return(\r\n        <button \r\n        onClick={() => onClick(props.onChange)} \r\n        onDragOver={(e) => {e.stopPropagation(); e.preventDefault()}} \r\n        onDragEnter={(e) => {e.stopPropagation(); e.preventDefault()}} \r\n        onDrop={(e) => onDrag(e, props.onChange)}> \r\n        {props.value}\r\n        </button>\r\n        );\r\n    }\r\n\r\nexport default MediaPool;",{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","severity":1,"message":"29","line":5,"column":40,"nodeType":"30","messageId":"31","endLine":5,"endColumn":42},{"ruleId":"32","severity":1,"message":"33","line":17,"column":17,"nodeType":"34","endLine":17,"endColumn":70},"no-native-reassign",["35"],"no-negated-in-lhs",["36"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]